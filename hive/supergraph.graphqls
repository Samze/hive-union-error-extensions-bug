schema
    @link(url: "https://specs.apollo.dev/link/v1.0")
    @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
    
    
    
    
    
    
    @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@enum", "@typescript", "@example", "@statusCodeTypeName", "@httpOperation", "@transport", "@extraSchemaDefinitionDirective"]
)
  {
    query: Query
    
    
  }

  
    directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

    directive @join__graph(name: String!, url: String!) on ENUM_VALUE

    
      directive @join__field(
        graph: join__Graph
        requires: join__FieldSet
        provides: join__FieldSet
        type: String
        external: Boolean
        override: String
        usedOverridden: Boolean
        
        
      ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
    
    

    directive @join__implements(
      graph: join__Graph!
      interface: String!
    ) repeatable on OBJECT | INTERFACE

    directive @join__type(
      graph: join__Graph!
      key: join__FieldSet
      extension: Boolean! = false
      resolvable: Boolean! = true
      isInterfaceObject: Boolean! = false
    ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

    directive @join__unionMember(
      graph: join__Graph!
      member: String!
    ) repeatable on UNION

    scalar join__FieldSet
    
  
  
  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }

  
  
  
  
  
  
  
enum join__Graph {
  SIMPLE_API @join__graph(name: "SimpleAPI", url: "http://localhost:3000") 
}

directive @enum(subgraph: String, value: String)  repeatable on ENUM_VALUE

directive @typescript(subgraph: String, type: String)  repeatable on SCALAR | ENUM

directive @example(subgraph: String, value: ObjMap)  repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @statusCodeTypeName(subgraph: String, typeName: String, statusCode: String)  repeatable on UNION

directive @httpOperation(
  subgraph: String
  path: String
  operationSpecificHeaders: [[String]]
  httpMethod: HTTPMethod
  isBinary: Boolean
  requestBaseBody: ObjMap
  queryParamArgMap: ObjMap
  queryStringOptionsByParam: ObjMap
  jsonApiFields: Boolean
  queryStringOptions: ObjMap
) repeatable on FIELD_DEFINITION

directive @transport(
  subgraph: String
  kind: String
  location: String
  headers: [[String]]
  queryStringOptions: ObjMap
  queryParams: [[String]]
) repeatable on SCHEMA

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @join__type(graph: SIMPLE_API)  @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address") 

scalar ObjMap @join__type(graph: SIMPLE_API) 

scalar _DirectiveExtensions @join__type(graph: SIMPLE_API) 

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{subgraph: "SimpleAPI", kind: "rest", location: "http://localhost:3000"}]}
) @join__type(graph: SIMPLE_API)  {
  """
  Get data with different response types
  """
  getData: getData_response @httpOperation(
    subgraph: "SimpleAPI"
    path: "/data"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
  """
  Get user data
  """
  getUser: UserResponse @httpOperation(
    subgraph: "SimpleAPI"
    path: "/user"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  )
}

type UserResponse @join__type(graph: SIMPLE_API)  {
  id: Int!
  name: String!
  email: EmailAddress!
  type: user_const!
}

type OrderResponse @join__type(graph: SIMPLE_API)  {
  orderId: String!
  amount: Float!
  status: String!
  type: order_const!
}

union getData_response @statusCodeTypeName(subgraph: "SimpleAPI", statusCode: "201", typeName: "UserResponse")  @statusCodeTypeName(subgraph: "SimpleAPI", statusCode: "202", typeName: "OrderResponse")  @join__type(graph: SIMPLE_API)  @join__unionMember(graph: SIMPLE_API, member: "UserResponse")  @join__unionMember(graph: SIMPLE_API, member: "OrderResponse")  = UserResponse | OrderResponse

enum user_const @typescript(subgraph: "SimpleAPI", type: "\"user\"")  @example(subgraph: "SimpleAPI", value: "user")  @join__type(graph: SIMPLE_API)  {
  user @enum(subgraph: "SimpleAPI", value: "\"user\"")  @join__enumValue(graph: SIMPLE_API) 
}

enum order_const @typescript(subgraph: "SimpleAPI", type: "\"order\"")  @example(subgraph: "SimpleAPI", value: "order")  @join__type(graph: SIMPLE_API)  {
  order @enum(subgraph: "SimpleAPI", value: "\"order\"")  @join__enumValue(graph: SIMPLE_API) 
}

enum HTTPMethod @join__type(graph: SIMPLE_API)  {
  GET @join__enumValue(graph: SIMPLE_API) 
  HEAD @join__enumValue(graph: SIMPLE_API) 
  POST @join__enumValue(graph: SIMPLE_API) 
  PUT @join__enumValue(graph: SIMPLE_API) 
  DELETE @join__enumValue(graph: SIMPLE_API) 
  CONNECT @join__enumValue(graph: SIMPLE_API) 
  OPTIONS @join__enumValue(graph: SIMPLE_API) 
  TRACE @join__enumValue(graph: SIMPLE_API) 
  PATCH @join__enumValue(graph: SIMPLE_API) 
}